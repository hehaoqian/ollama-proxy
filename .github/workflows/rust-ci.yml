name: Rust CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: "0 0 * * 1"
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  check:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Update to latest Rust
        run: rustup update

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check with Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run publish dry-run
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --dry-run

      - name: Run tests
        run: cargo test --all-features

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Update to latest Rust
        run: rustup update

      - name: Build documentation
        run: cargo doc --no-deps --all-features --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

  msrv:
    name: Test Minimum Supported Rust Version (MSRV)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Extract MSRV from Cargo.toml
        id: msrv
        run: |
          MSRV=$(grep -E '^rust-version\s*=' Cargo.toml | head -n1 | sed -E 's/.*=\s*"([^"]+)".*/\1/')
          if [ -z "$MSRV" ]; then
            echo "MSRV not found in Cargo.toml"
            exit 1
          fi
          echo "msrv=$MSRV" >> $GITHUB_OUTPUT

      - name: Install MSRV toolchain
        run: |
          rustup install ${{ steps.msrv.outputs.msrv }}
          rustup default ${{ steps.msrv.outputs.msrv }}

      - name: Check with MSRV
        run: cargo +${{ steps.msrv.outputs.msrv }} check

      - name: Test with MSRV
        run: cargo +${{ steps.msrv.outputs.msrv }} test
